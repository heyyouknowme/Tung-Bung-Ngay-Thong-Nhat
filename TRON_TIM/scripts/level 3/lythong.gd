extends CharacterBody2D

@export var patrol_points: Array[Node2D] = []
@export var player_path: NodePath
@export var chase_speed := 200.0  # T·ªëc ƒë·ªô khi ƒëu·ªïi theo
@export var patrol_speed := 180.0  # T·ªëc ƒë·ªô khi tu·∫ßn tra
@export var approach_speed := 130.0  # T·ªëc ƒë·ªô khi ti·∫øn g·∫ßn player
@export var acceleration := 0.2  # TƒÉng t·ªëc m∆∞·ª£t m√† h∆°n
@export var memory_time := 3.0  # Th·ªùi gian nh·ªõ v·ªã tr√≠ player sau khi m·∫•t d·∫•u

@onready var player: Node2D = get_node_or_null(player_path)
@onready var sprite = $AnimatedSprite2D
@onready var vision_root = $VisionRoot
@onready var vision_area = $VisionRoot/VisionCone/Area2D
@onready var light = $PointLight2D
@onready var vision_cone_light = $PointLight2D  # Th√™m tham chi·∫øu ƒë·∫øn ƒë√®n cone
@onready var countdown_label := get_node("../UI/CountdownLabel")
@onready var warning_sound = get_node("../WarningSound")  # Tham chi·∫øu ƒë·∫øn warning sound (ƒë·∫£m b·∫£o ƒë√£ th√™m node n√†y)
@onready var suspicious_icon := $SuspiciousIcon

enum State {PATROL, CHASE, SUSPICIOUS, SEARCH}

const CELL_SIZE = 64*3
const ROTATION_EPSILON = deg_to_rad(5)  # ch·ªâ xoay VisionRoot n·∫øu l·ªách tr√™n 5 ƒë·ªô
const CLOSE_TO_PLAYER_DISTANCE = 180     # Kho·∫£ng c√°ch ƒë·ªÉ NPC khi g·∫ßn player
const PATH_UPDATE_TIME = 2.0            # C·∫≠p nh·∫≠t ƒë∆∞·ªùng ƒëi m·ªói 2 gi√¢y

var astar_full_map := AStar2D.new()
var path := PackedVector2Array()
var current_path_index := 0
var speed := 100.0
var current_state = State.PATROL
var patrol_index := 0
var last_target_position := Vector2.ZERO  # Ghi nh·ªõ v·ªã tr√≠ player c≈© khi ƒëu·ªïi
var last_known_position := Vector2.ZERO   # V·ªã tr√≠ cu·ªëi c√πng th·∫•y player
var chase_update_timer := Timer.new()
var memory_timer := Timer.new()
var reaction_timer := Timer.new()
var reaction_time := 0.3  # Th·ªùi gian ƒë·ªÉ NPC ph·∫£n ·ª©ng khi th·∫•y player
var blink_timer := Timer.new()  # Timer cho hi·ªáu ·ª©ng nh√°y ƒë√®n
var original_light_energy := 0.0  # L∆∞u gi√° tr·ªã nƒÉng l∆∞·ª£ng ban ƒë·∫ßu c·ªßa ƒë√®n
var check_proximity_timer := Timer.new()  # Timer ki·ªÉm tra kho·∫£ng c√°ch
var countdown_timer := Timer.new()  # Timer ƒë·ªÉ ƒë·∫øm ng∆∞·ª£c
var countdown_time := 3.0  # Th·ªùi gian ƒë·∫øm ng∆∞·ª£c 3 gi√¢y
var is_player_detected := false  # Tr·∫°ng th√°i ph√°t hi·ªán player
var previous_position := Vector2.ZERO
var stuck_check_timer := Timer.new()

func _ready():
	if patrol_points.is_empty():
		push_warning("‚ö†Ô∏è Ch∆∞a g√°n patrol_points trong Inspector!")
		return

	if not player:
		push_warning("‚ö†Ô∏è Ch∆∞a g√°n player_path trong Inspector!")
		
	# Ki·ªÉm tra countdown_label
	if not countdown_label:
		push_warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y countdown_label t·∫°i ƒë∆∞·ªùng d·∫´n $UI/CountdownLabel!")
		
	if vision_area:
		# Thay ƒë·ªïi k·∫øt n·ªëi t√≠n hi·ªáu ƒë·ªÉ s·ª≠ d·ª•ng h√†m chung _detect_player
		vision_area.connect("body_entered", _on_vision_body_entered)
		vision_area.connect("body_exited", _on_vision_body_exited)
	else:
		push_error("‚ùå Kh√¥ng t√¨m th·∫•y Area2D trong VisionCone!")

	_generate_astar_full_map()
	_set_path_weights()
	
	stuck_check_timer.wait_time = 1.0
	stuck_check_timer.one_shot = false
	stuck_check_timer.timeout.connect(_check_if_stuck)
	add_child(stuck_check_timer)
	stuck_check_timer.start()
	
	# Thi·∫øt l·∫≠p timer c·∫≠p nh·∫≠t ƒë∆∞·ªùng ƒëi
	chase_update_timer.wait_time = PATH_UPDATE_TIME
	chase_update_timer.autostart = false
	chase_update_timer.one_shot = false
	chase_update_timer.timeout.connect(_update_chase_path)
	add_child(chase_update_timer)
	
	# Thi·∫øt l·∫≠p timer nh·ªõ
	memory_timer.wait_time = memory_time
	memory_timer.one_shot = true
	add_child(memory_timer)
	
	# Thi·∫øt l·∫≠p timer ph·∫£n ·ª©ng
	reaction_timer.wait_time = reaction_time
	reaction_timer.one_shot = true
	add_child(reaction_timer)
	
	# Thi·∫øt l·∫≠p timer cho hi·ªáu ·ª©ng nh√°y ƒë√®n
	blink_timer.wait_time = 0.3  # Nh√°y m·ªói 0.3 gi√¢y
	blink_timer.autostart = false
	blink_timer.one_shot = false
	blink_timer.timeout.connect(_blink_light)
	add_child(blink_timer)
	
	# Thi·∫øt l·∫≠p timer ƒë·ªÉ ki·ªÉm tra kho·∫£ng c√°ch m·ªói gi√¢y
	check_proximity_timer.wait_time = 1.0
	check_proximity_timer.autostart = true
	check_proximity_timer.one_shot = false
	check_proximity_timer.timeout.connect(_check_player_proximity)
	add_child(check_proximity_timer)
	
	# Thi·∫øt l·∫≠p timer ƒë·∫øm ng∆∞·ª£c
	countdown_timer.wait_time = 1.0
	countdown_timer.one_shot = false
	countdown_timer.timeout.connect(_on_countdown_timer_tick)
	add_child(countdown_timer)

	if vision_cone_light:
		original_light_energy = vision_cone_light.energy
	
	# ·∫®n label ƒë·∫øm ng∆∞·ª£c ban ƒë·∫ßu
	if countdown_label:
		countdown_label.visible = false
	else:
		print("‚ùå Kh√¥ng t√¨m th·∫•y countdown_label!")
	
	_go_to_nearest_patrol_point()  # B·∫Øt ƒë·∫ßu v·ªõi ƒëi·ªÉm tu·∫ßn tra g·∫ßn nh·∫•t
	
func _reverse_direction():
	if path.size() > 1:
		path.reverse()
		current_path_index = 0
	else:
		# N·∫øu kh√¥ng c√≥ path, ƒë·ªïi patrol_index
		patrol_index = (patrol_index + 1) % patrol_points.size()
		_set_path_to_target(patrol_points[patrol_index].global_position)
		print("Patrol index: ", patrol_index)

func _check_if_stuck():
	var distance_moved = global_position.distance_to(previous_position)
	
	if distance_moved < 5.0 and velocity.length() > 0.1:
		print("üö´ NPC c√≥ v·∫ª b·ªã k·∫πt ‚Üí xoay h∆∞·ªõng")
		_reverse_direction()
	else:
		# c·∫≠p nh·∫≠t l·∫°i v·ªã tr√≠ n·∫øu di chuy·ªÉn ƒë∆∞·ª£c
		previous_position = global_position

# H√†m chung ƒë·ªÉ x·ª≠ l√Ω khi ph√°t hi·ªán player
func _detect_player():
	if not is_player_detected and _player_is_in_vision():
		is_player_detected = true
		print("‚ö†Ô∏è Ph√°t hi·ªán player, b·∫Øt ƒë·∫ßu reaction_timer")
		reaction_timer.start()
		await reaction_timer.timeout

		# ƒê·∫£m b·∫£o player v·∫´n c√≤n trong vision khi timeout k·∫øt th√∫c
		if _player_is_in_vision():
			print("‚úÖ Player b·ªã ph√°t hi·ªán ho√†n to√†n sau khi reaction_timer k·∫øt th√∫c")
			_start_countdown()
			_start_chase()
			_start_light_blinking()
		else:
			print("‚ùå Player ƒë√£ r·ªùi kh·ªèi v√πng t·∫ßm nh√¨n tr∆∞·ªõc khi b·ªã detect ho√†n to√†n")
			is_player_detected = false  # reset tr·∫°ng th√°i


# T√°ch c√°c h√†nh ƒë·ªông khi ph√°t hi·ªán th√†nh c√°c h√†m ri√™ng
func _start_chase():
	if current_state != State.CHASE:
		print("üëÅÔ∏è NPC ph√°t hi·ªán player ‚Üí b·∫Øt ƒë·∫ßu ƒëu·ªïi")
		current_state = State.CHASE
		last_target_position = player.global_position
		last_known_position = player.global_position
		_set_path_to_target(player.global_position)
		chase_update_timer.start()

func _start_light_blinking():
	if vision_cone_light:
		print("üí° B·∫Øt ƒë·∫ßu nh√°y ƒë√®n")
		vision_cone_light.energy = original_light_energy * 2  # TƒÉng ƒë·ªô s√°ng ban ƒë·∫ßu
		blink_timer.start()

func _stop_light_blinking():
	if vision_cone_light:
		print("üí° D·ª´ng nh√°y ƒë√®n")
		vision_cone_light.energy = original_light_energy  # Kh√¥i ph·ª•c ƒë·ªô s√°ng ban ƒë·∫ßu
		blink_timer.stop()

func _start_countdown():
	# Ki·ªÉm tra l·∫°i label v√† hi·ªÉn th·ªã n√≥
	if not countdown_label:
		print("‚ùå Kh√¥ng th·ªÉ hi·ªÉn th·ªã countdown: Label kh√¥ng t·ªìn t·∫°i!")
		# Th·ª≠ truy c·∫≠p l·∫°i node
		countdown_label = get_node_or_null("UI/CountdownLabel")
		if not countdown_label:
			print("‚ùå‚ùå V·∫´n kh√¥ng t√¨m th·∫•y countdown_label!")
			return
	
	print("‚è±Ô∏è B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c")
	countdown_time = 3.0
	countdown_label.text = str(int(countdown_time))
	
	# ƒê·∫£m b·∫£o label hi·ªÉn th·ªã
	countdown_label.visible = true
	
	# Ki·ªÉm tra xem label c√≥ th·ª±c s·ª± visible hay kh√¥ng
	await get_tree().process_frame
	
	countdown_timer.start()
	
	# N·∫øu c√≥ √¢m thanh c·∫£nh b√°o, ph√°t n√≥
	if warning_sound and warning_sound.has_method("play"):
		warning_sound.play()
		print("‚úÖ ƒê√£ ph√°t √¢m thanh c·∫£nh b√°o")

func _stop_countdown():
	if countdown_timer:
		countdown_timer.stop()
	if countdown_label:
		countdown_label.visible = false

func _blink_light():
	if vision_cone_light:
		# ƒê·∫£o tr·∫°ng th√°i ƒë√®n
		if vision_cone_light.energy > original_light_energy:
			vision_cone_light.energy = original_light_energy * 0.5  # M·ªù h∆°n
		else:
			vision_cone_light.energy = original_light_energy * 2.0  # S√°ng h∆°n

func _on_countdown_timer_tick():
	print("‚è±Ô∏è Countdown timer tick: " + str(countdown_time))
	
	if not _should_detect_player():
		print("‚ùå Kh√¥ng c√≤n ph√°t hi·ªán player -> d·ª´ng ƒë·∫øm ng∆∞·ª£c")
		_stop_countdown()
		is_player_detected = false
		return
	
	# Ki·ªÉm tra l·∫°i tr·∫°ng th√°i c·ªßa label
	if countdown_label and not countdown_label.visible:
		print("‚ö†Ô∏è Label b·ªã ·∫©n trong qu√° tr√¨nh ƒë·∫øm ng∆∞·ª£c! Hi·ªÉn th·ªã l·∫°i.")
		countdown_label.visible = true
		
	countdown_time -= 1.0
	if countdown_time <= 0:
		countdown_timer.stop()
		if countdown_label:
			countdown_label.visible = false
		print("üíÄ Game Over!")
		get_tree().change_scene_to_file("res://TRON_TIM/scenes/gameover.tscn")
	else:
		if countdown_label:
			countdown_label.text = str(int(countdown_time))
			print("Countdown c√≤n l·∫°i: " + str(int(countdown_time)))

func _on_vision_body_entered(body):
	if body == player:
		print("üëÄ Player ƒëi v√†o t·∫ßm nh√¨n")
		if _should_detect_player():
			_detect_player()

func _on_vision_body_exited(body):
	if body == player and current_state == State.CHASE:
		print("üëã M·∫•t d·∫•u player")
		
		# D·ª´ng ƒë·∫øm ng∆∞·ª£c v√† chuy·ªÉn sang tr·∫°ng th√°i t√¨m ki·∫øm
		_stop_countdown()
		is_player_detected = false
		
		current_state = State.SEARCH
		chase_update_timer.stop()
		
		# ƒêi ƒë·∫øn v·ªã tr√≠ cu·ªëi c√πng th·∫•y player
		_set_path_to_target(last_known_position)
		
		# B·∫Øt ƒë·∫ßu ƒë·∫øm th·ªùi gian nh·ªõ
		memory_timer.start()
		
		print("üîç B·∫Øt ƒë·∫ßu t√¨m ki·∫øm")

# H√†m ki·ªÉm tra xem c√≥ n√™n ph√°t hi·ªán player kh√¥ng
func _should_detect_player() -> bool:
	if not player:
		return false
	
	var is_player_moving = _is_player_moving()
	var distance = global_position.distance_to(player.global_position)
	
	# Trong v√πng nh√¨n th·∫•y v√† ƒëang di chuy·ªÉn
	if is_player_moving and _player_is_in_vision():
		print("üïµÔ∏è‚Äç‚ôÇÔ∏è Player b·ªã ph√°t hi·ªán")
		#print(">> player.velocity: ", player.velocity)
		#print(">> player.velocity.length(): ", player.velocity.length())
		return true
	
	# Trong kho·∫£ng c√°ch g·∫ßn v√† ƒë·ª©ng im
	if distance <= CLOSE_TO_PLAYER_DISTANCE:
		print("... Player distance is so close!")
		#print("üïµÔ∏è‚Äç‚ôÇÔ∏è Checking player... Distance:", distance, "Moving:", is_player_moving)
		#print("CLOSE_TO_PLAYER_DISTANCE: " + str(CLOSE_TO_PLAYER_DISTANCE))		# B·∫Øt ƒë·∫ßu t·∫•t c·∫£ c√°c hi·ªáu ·ª©ng khi ph√°t hi·ªán
		return true
	
	return false

# H√†m ki·ªÉm tra xem player c√≥ ƒëang di chuy·ªÉn kh√¥ng
func _is_player_moving() -> bool:
	if "velocity" in player:
		return player.velocity.length() > 0.1
	return player.has_method("get_is_moving") and player.get_is_moving()

func _update_chase_path():
	if current_state == State.CHASE and player:
		# Ch·ªâ c·∫≠p nh·∫≠t ƒë∆∞·ªùng ƒëi n·∫øu player ƒë√£ di chuy·ªÉn ƒë·ªß xa
		if player.global_position.distance_to(last_target_position) > 10:
			var from_id = _get_closest_astar_id(astar_full_map, global_position)
			
			# D·ª± ƒëo√°n v·ªã tr√≠ player trong t∆∞∆°ng lai d·ª±a tr√™n h∆∞·ªõng di chuy·ªÉn (n·∫øu c√≥)
			var predicted_position = player.global_position
			if "velocity" in player and player.velocity.length() > 0:
				predicted_position += player.velocity.normalized() * 30
				
			var to_id = _get_closest_astar_id(astar_full_map, predicted_position)
			
			if from_id != -1 and to_id != -1:
				path = astar_full_map.get_point_path(from_id, to_id)
				_optimize_path()  # T·ªëi ∆∞u ƒë∆∞·ªùng ƒëi
				current_path_index = 0
				last_target_position = player.global_position
				print("üîÑ C·∫≠p nh·∫≠t ƒë∆∞·ªùng ƒëu·ªïi")

func _go_to_nearest_patrol_point():
	if patrol_points.is_empty():
		return
		
	var nearest_id := 0
	var min_dist := INF
	for i in range(patrol_points.size()):
		var dist = global_position.distance_to(patrol_points[i].global_position)
		if dist < min_dist:
			min_dist = dist
			nearest_id = i
	patrol_index = nearest_id
	_set_path_to_target(patrol_points[patrol_index].global_position)
	print("üö∂ ƒêi ƒë·∫øn ƒëi·ªÉm tu·∫ßn tra g·∫ßn nh·∫•t: " + str(patrol_index))

func _physics_process(delta):
	if not player:
		return
	
	# Ki·ªÉm tra ƒëi·ªÅu ki·ªán ph√°t hi·ªán li√™n t·ª•c trong _physics_process
	if _should_detect_player() and not is_player_detected:
		_detect_player()
	
	# C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† x·ª≠ l√Ω h√†nh vi
	match current_state:
		State.PATROL:
			_handle_patrol(delta)
		State.CHASE:
			_handle_chase(delta)
		State.SUSPICIOUS:
			_handle_suspicious(delta)
		State.SEARCH:
			_handle_search(delta)
	
	queue_redraw()

func _handle_patrol(delta):
	var target_speed = patrol_speed
	speed = lerp(speed, target_speed, acceleration)
	
	_process_movement()
	
	# N·∫øu ƒë√£ ho√†n th√†nh ƒë∆∞·ªùng ƒëi, chuy·ªÉn ƒë·∫øn ƒëi·ªÉm tu·∫ßn tra ti·∫øp theo
	if path.is_empty():
		_next_patrol()
	
	if 	current_state == State.SUSPICIOUS and suspicious_icon.visible:
		suspicious_icon.visible = false
		


func _handle_chase(delta):
	var distance_to_player = global_position.distance_to(player.global_position)
	var target_speed = chase_speed
	
	# Gi·∫£m t·ªëc ƒë·ªô khi ƒë·∫øn g·∫ßn player
	if distance_to_player < CLOSE_TO_PLAYER_DISTANCE:
		target_speed = approach_speed
	
	speed = lerp(speed, target_speed, acceleration)
	
	# Ki·ªÉm tra t·∫ßm nh√¨n th·∫≥ng
	if _check_line_of_sight():
		# C·∫≠p nh·∫≠t v·ªã tr√≠ cu·ªëi ƒë∆∞·ª£c bi·∫øt
		last_known_position = player.global_position
	
	_process_movement()

func _handle_suspicious(delta):
	# Di chuy·ªÉn ch·∫≠m v√† nh√¨n xung quanh khi nghi ng·ªù
	var target_speed = patrol_speed * 0.7
	speed = lerp(speed, target_speed, acceleration)
	
	# Xoay vision cone ƒë·ªÉ t√¨m ki·∫øm
	_rotate_vision_to_search(delta)
	
	_process_movement()
	
	# Ki·ªÉm tra n·∫øu th·∫•y player trong qu√° tr√¨nh nghi ng·ªù
	if _should_detect_player():
		_detect_player()

func _handle_search(delta):
	var target_speed = patrol_speed * 0.8
	speed = lerp(speed, target_speed, acceleration)
	
	_process_movement()
	
	# N·∫øu ƒë√£ ƒë·∫øn v·ªã tr√≠ cu·ªëi ƒë∆∞·ª£c bi·∫øt v√† kh√¥ng t√¨m th·∫•y player
	if path.is_empty():
		if not memory_timer.is_stopped():
			memory_timer.stop()
			
		current_state = State.SUSPICIOUS
		suspicious_icon.visible = true
		# ƒê·ª£i m·ªôt l√∫c trong tr·∫°ng th√°i nghi ng·ªù r·ªìi quay l·∫°i tu·∫ßn tra
		await get_tree().create_timer(2.0).timeout
		if current_state == State.SUSPICIOUS:
			suspicious_icon.visible = false
			current_state = State.PATROL
			_stop_light_blinking()
			_go_to_nearest_patrol_point()

func _player_is_visible() -> bool:
	# Ki·ªÉm tra xem player c√≥ trong t·∫ßm nh√¨n kh√¥ng
	if vision_area and vision_area.get_overlapping_bodies().has(player):
		return _check_line_of_sight()
	return false

func _process_movement():
	if path.is_empty():
		velocity = Vector2.ZERO
		return
	
	if current_path_index < path.size():
		var target = path[current_path_index]
		var direction = (target - global_position).normalized()
		velocity = direction * speed
		
		# C·∫≠p nh·∫≠t ho·∫°t ·∫£nh v√† xoay h∆∞·ªõng nh√¨n
		if abs(direction.x) > abs(direction.y):
			sprite.play("walk_right" if direction.x > 0 else "walk_left")
		else:
			sprite.play("walk_down" if direction.y > 0 else "walk_up")

		# Xoay VisionRoot v√† ƒë√®n theo h∆∞·ªõng di chuy·ªÉn
		if velocity.length() > 0.1:
			var desired_angle = direction.angle() + deg_to_rad(180)  # n·∫øu c·∫ßn xoay ng∆∞·ª£c
			if abs(vision_root.rotation - desired_angle) > ROTATION_EPSILON:
				vision_root.rotation = lerp_angle(vision_root.rotation, desired_angle, 0.1)
				light.position = Vector2.ZERO  # n·∫±m ƒë√∫ng gi·ªØa NPC
				light.rotation = vision_root.rotation

		move_and_slide()

		# Ki·ªÉm tra n·∫øu ƒë√£ ƒë·∫øn ƒëi·ªÉm ti·∫øp theo
		if global_position.distance_to(target) < 5:
			current_path_index += 1
			if current_path_index >= path.size():
				path.clear()

func _rotate_vision_to_search(delta):
	# Xoay vision cone ƒë·ªÉ t√¨m ki·∫øm xung quanh
	vision_root.rotation += delta * 2.0  # Xoay 2 radian/gi√¢y
	light.rotation = vision_root.rotation

func _generate_astar_full_map():
	var id := 0
	var occupied = {}
	
	# T·∫°o l∆∞·ªõi ƒëi·ªÉm ƒë·ªìng ƒë·ªÅu
	for y in range(-10, 11):
		for x in range(-10, 11):
			var pos = Vector2(x, y) * CELL_SIZE + Vector2(CELL_SIZE/2, CELL_SIZE/2)
			if _is_position_blocked(pos):
				continue
			astar_full_map.add_point(id, pos)
			occupied[Vector2i(x, y)] = id
			id += 1
	
	# K·∫øt n·ªëi c√°c ƒëi·ªÉm l√¢n c·∫≠n
	for pos in occupied.keys():
		var center_id = occupied[pos]
		for offset in [Vector2i.LEFT, Vector2i.RIGHT, Vector2i.UP, Vector2i.DOWN,
			Vector2i(-1,-1), Vector2i(1,-1), Vector2i(-1,1), Vector2i(1,1)]:
			var neighbor = pos + offset
			if occupied.has(neighbor):
				astar_full_map.connect_points(center_id, occupied[neighbor])

func _set_path_weights():
	# Thi·∫øt l·∫≠p tr·ªçng s·ªë cho c√°c ƒë∆∞·ªùng ƒëi 
	for id in astar_full_map.get_point_ids():
		var pos = astar_full_map.get_point_position(id)
		# C√°c ƒëi·ªÉm g·∫ßn t∆∞·ªùng s·∫Ω c√≥ tr·ªçng s·ªë cao h∆°n
		if _is_near_wall(pos):
			astar_full_map.set_point_weight_scale(id, 2.0)

func _is_near_wall(pos: Vector2) -> bool:
	# Ki·ªÉm tra xem ƒëi·ªÉm c√≥ g·∫ßn t∆∞·ªùng kh√¥ng
	var space_state = get_world_2d().direct_space_state
	
	for dir in [Vector2.UP, Vector2.DOWN, Vector2.LEFT, Vector2.RIGHT]:
		var query := PhysicsRayQueryParameters2D.new()
		query.from = pos
		query.to = pos + dir * 20  # Ki·ªÉm tra trong ph·∫°m vi 20px
		query.exclude = [self, player] if player else [self]
		
		var result = space_state.intersect_ray(query)
		if not result.is_empty():
			return true
	
	return false

func _is_position_blocked(pos: Vector2) -> bool:
	var space_state = get_world_2d().direct_space_state
	var query := PhysicsPointQueryParameters2D.new()
	query.position = pos
	query.collide_with_areas = true
	query.collide_with_bodies = true
	
	var result = space_state.intersect_point(query)
	
	for collision in result:
		var collider = collision["collider"]
		# B·ªè qua va ch·∫°m v·ªõi Area2D c·ªßa ch√≠nh NPC
		if collider == vision_area or collider == self:
			continue
		# B·ªè qua va ch·∫°m v·ªõi player
		if collider == player:
			continue
		return true
		
	return false

# Th·ªëng nh·∫•t m·ªôt ph∆∞∆°ng th·ª©c ƒë·ªÉ thi·∫øt l·∫≠p ƒë∆∞·ªùng ƒëi
func _set_path_to_target(target: Vector2):
	# N·∫øu l√† ƒëi·ªÉm tu·∫ßn tra, ƒëi th·∫≥ng ƒë·∫øn ƒë√≥
	if current_state == State.PATROL:
		path.clear()
		path.append(target)
		current_path_index = 0
	# N·∫øu ƒëang ƒëu·ªïi ho·∫∑c t√¨m ki·∫øm, s·ª≠ d·ª•ng AStar
	else:
		var from_id = _get_closest_astar_id(astar_full_map, global_position)
		var to_id = _get_closest_astar_id(astar_full_map, target)
		
		if from_id != -1 and to_id != -1:
			path = astar_full_map.get_point_path(from_id, to_id)
			_optimize_path()
			current_path_index = 0

func _optimize_path():
	# Gi·∫£m s·ªë ƒëi·ªÉm trong ƒë∆∞·ªùng ƒëi ƒë·ªÉ di chuy·ªÉn m∆∞·ª£t h∆°n
	if path.size() > 3:
		var simplified_path = PackedVector2Array()
		simplified_path.append(path[0])
		
		for i in range(1, path.size() - 1):
			# Ki·ªÉm tra xem c√≥ th·ªÉ b·ªè qua ƒëi·ªÉm n√†y kh√¥ng
			if not _can_move_directly(path[i-1], path[i+1]):
				simplified_path.append(path[i])
				
		simplified_path.append(path[path.size()-1])
		path = simplified_path

func _can_move_directly(from_pos: Vector2, to_pos: Vector2) -> bool:
	# Ki·ªÉm tra xem c√≥ th·ªÉ di chuy·ªÉn tr·ª±c ti·∫øp t·ª´ ƒëi·ªÉm n√†y ƒë·∫øn ƒëi·ªÉm kia kh√¥ng
	var space_state = get_world_2d().direct_space_state
	var query := PhysicsRayQueryParameters2D.new()
	query.from = from_pos
	query.to = to_pos
	query.exclude = [self, player] if player else [self]
	
	var result = space_state.intersect_ray(query)
	return result.is_empty()

func _get_closest_astar_id(astar: AStar2D, pos: Vector2) -> int:
	var closest_id = -1
	var min_dist = INF
	
	for id in astar.get_point_ids():
		var dist = astar.get_point_position(id).distance_to(pos)
		if dist < min_dist:
			min_dist = dist
			closest_id = id
			
	return closest_id

func _next_patrol():
	if patrol_points.is_empty():
		return
		
	patrol_index = (patrol_index + 1) % patrol_points.size()
	_set_path_to_target(patrol_points[patrol_index].global_position)
	print("‚û°Ô∏è ƒêi ƒë·∫øn ƒëi·ªÉm tu·∫ßn tra ti·∫øp theo: " + str(patrol_index))

func _check_line_of_sight() -> bool:
	# Ki·ªÉm tra xem c√≥ v·∫≠t c·∫£n gi·ªØa NPC v√† player kh√¥ng
	if not player:
		return false
			
	var space_state = get_world_2d().direct_space_state
	var query := PhysicsRayQueryParameters2D.new()
	query.from = global_position
	query.to = player.global_position
	query.exclude = [self]
	
	var result = space_state.intersect_ray(query)
	return result.is_empty() or (not result.is_empty() and result["collider"] == player)

func _player_is_in_vision() -> bool:
	if vision_area and player:
		return vision_area.get_overlapping_bodies().has(player)
	return false

func _check_player_proximity():
	if not player:
		return
		
	if _should_detect_player() and not is_player_detected:
		print("üö® ƒêi·ªÅu ki·ªán ph√°t hi·ªán tho·∫£ m√£n ‚Üí B·∫Øt ƒë·∫ßu truy ƒëu·ªïi")
		_detect_player()

#func _draw():
	## V·∫Ω ƒë∆∞·ªùng ƒëi ƒë·ªÉ debug
	#if path.size() > 1:
		#for i in range(path.size() - 1):
			#draw_line(to_local(path[i]), to_local(path[i+1]), Color.YELLOW, 2)
#
	## V·∫Ω c√°c ƒëi·ªÉm tu·∫ßn tra
	#for p in patrol_points:
		#draw_circle(to_local(p.global_position), 5, Color.RED)
		#
	## V·∫Ω v·ªã tr√≠ cu·ªëi c√πng th·∫•y player (n·∫øu ƒëang t√¨m ki·∫øm)
	#if current_state == State.SEARCH:
		#draw_circle(to_local(last_known_position), 8, Color.ORANGE)
